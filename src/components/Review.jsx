import React, {Component} from 'react'
import getCards from './methods/getCards'

export default class Review extends Component {
    constructor() {
        super()
        this.state = {
            cards: [],
            finishedCards: [],
            cardsRemaining: null, // a count of remaining cards
            cardsFinished: 0, // a count of finished cards
            currentCard: 0, // this will be generated by the "randomizer" function
            type: null,
            id: null,
            flipped: false
        }
    }

    componentDidMount = async () => {
        const {type, id} = this.props.match.params
        this.setState({type,id})
        await this.handleGetCards(type, id)
        const cardsRemaining = this.state.cards.length
        const cardsFinished = 0;
        this.setState({cardsRemaining, cardsFinished})
        // generate random index within the range of cardsRemaining, set on state as currentCard
        const currentCard = this.generateRandomCard(cardsRemaining)
        this.setState({currentCard})
    }

    generateRandomCard = numOfCards => {
        // Generate a random index within the bounds of our current remaining cards
        let maximum = numOfCards - 1
        let minimum = 0
        let random = Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;
        return random
    }

    handleGetCards = async (type, id) => {
        const cards = await getCards(type, id)
        this.setState({cards})
    }

    handleNextCard = async currentCard => {
        // Set our current card in the list of finished cards, delete from list of remaining cards
        let {finishedCards, cards, cardsFinished, cardsRemaining} = this.state
        finishedCards = [...finishedCards, cards[currentCard]]
        cards.splice(currentCard,1)
        // decrement number of remaining cards, increment finished cards
        cardsRemaining--; 
        cardsFinished++;
        // generate a random new card, set on state
        let newCard = await this.generateRandomCard(cardsRemaining)
        this.setState({
            currentCard: newCard,
            // Ensure we're set to display the question side of the card
            flipped: false,
            finishedCards,
            cards,
            cardsRemaining,
            cardsFinished
        })
    }

    handleFlip = () => {
        let flipped = !this.state.flipped
        this.setState({flipped})
    }

    handleFinish = () => {
        this.props.history.push('/study')
    }

    
    render() {
        return(
            <div>
                <div>
                    {
                        this.state.cards.length >= 1 ? 
                        <p onClick = {() => this.handleFlip()}>
                            {
                                !this.state.flipped ?
                                this.state.cards[this.state.currentCard].question
                                :
                                this.state.cards[this.state.currentCard].answer
                            }
                        </p>
                        :
                        <> </>
                    }
                    <br/>
                    {
                        this.state.cardsFinished === this.state.cardsRemaining + this.state.cardsFinished ?
                        <> </>
                        :
                        <button onClick = {() => this.handleNextCard(this.state.currentCard)}>Next Card</button>
                    }
                </div>
                <div>
                    <p>You've finished {this.state.cardsFinished}/{this.state.cardsRemaining+this.state.cardsFinished} cards</p>
                </div>
                <button onClick = {() => this.handleFinish()}>Finish Studying</button>
            </div>
        )
    }
}